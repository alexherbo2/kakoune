def -params 1 -docstring "colorscheme <name>: enable named colorscheme" \
    -shell-script-candidates %{
    find -L "${kak_runtime}/colors" "${kak_config}/colors" -type f -name '*\.kak' \
        | while read -r filename; do
            basename="${filename##*/}"
            printf %s\\n "${basename%.*}"
        done | sort -u
  } \
  colorscheme %{ evaluate-commands %sh{
    find_colorscheme() {
        find -L "${1}" -type f -name "${2}".kak | head -n 1
    }

    if [ -d "${kak_config}/colors" ]; then
        filename=$(find_colorscheme "${kak_config}/colors" "${1}")
    fi
    if [ -z "${filename}" ]; then
        filename=$(find_colorscheme "${kak_runtime}/colors" "${1}")
    fi

    if [ -n "${filename}" ]; then
        printf 'source %%{%s}' "${filename}"
    else
        echo "fail 'No such colorscheme'"
    fi
}}

define-command source-recursive -params 1.. -file-completion -docstring 'Source recursively for .kak files in the given directories' %{
    evaluate-commands %sh{
        find -L "$@" -type f -name '*.kak' |
        while read file; do
            printf '
                try %%{
                    source %%{%s}
                } catch %%{
                    echo -debug %%{Could not load: %s}
                }
            ' "$file" "$file"
        done
    }
}

evaluate-commands %sh{

    echo "colorscheme default"

    if [ -d "${kak_config}/autoload" ]; then
        printf 'source-recursive %%{%s/autoload}\n' "$kak_config"
    elif [ -d "${kak_runtime}/autoload" ]; then
        printf 'source-recursive %%{%s/autoload}\n' "$kak_runtime"
    fi

    if [ -f "${kak_runtime}/kakrc.local" ]; then
        echo "source '${kak_runtime}/kakrc.local'"
    fi

    if [ -f "${kak_config}/kakrc" ]; then
        echo "source '${kak_config}/kakrc'"
    fi
}
